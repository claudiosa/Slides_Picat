%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Comandos Condicionais, Laços e Repetições}

%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}
\frametitle{Predicados e Funções}
\begin{minipage}{0.47\textwidth}
    \begin{itemize}
        \item Definições
        \item Contexto de uso
        \item Estruturas de repetição
        \item Estruturas de decisão
    \end{itemize}
\end{minipage}
\begin{minipage}{0.5\textwidth}
\begin{figure}[ht!]
\begin{center}
\includegraphics[width=1.2\textwidth, height=0.40\textheight]{figures/logo_picat_alex.jpg}
\end{center}
\end{figure}
\end{minipage}
\end{frame}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% ATE AQUI

\begin{frame}[fragile]
\frametitle{Comandos Condicionais, Laços e Repetições}
    
  
  \begin{itemize}
      
      \item Ao contrário do Prolog, Picat apresenta
      conceitos e comandos da programação imperativa
      
      \pause
      \item Esta maneira  ameniza os obstáculos
      em se aprender uma linguagem com o paradigma lógico,
      tendo outros elementos conhecidos
  
          \pause
      \item Assim, Picat apresenta estruturas clássicas
      como: 
      \begin{itemize}
        \item  \texttt{if--then--end}, \texttt{if--then--else--end}, \texttt{if--then--elseif--then--....end}
        \item  \texttt{foreach}
        \item  \texttt{while}
        \item  \texttt{do--while}
        \item Bem como a atribuição, `\texttt{:=}', já discutida
      \end{itemize}
   \end{itemize}

       
\end{frame}    
     
    %%%%%%%%%%%%%%%%
    
\begin{frame}[fragile]
\frametitle{Comandos Condicionais}
    
    \begin{itemize}
        
        \item Picat implementa uma  estrutura condicional explícita (na programação em lógica, voce faz isto implicitamente)
        
        \pause
        \item Sua notação é:\\
        
        \begin{tabbing}
            aa \= aaa \= aaa \= aaa \= aaa \= aaa \= aaa \kill
            \> \texttt{if (Exp) then}\\
            \> \> \texttt{Ações} \\
            \> \texttt{else}\\
            \> \> \texttt{Ações}\\
            \> \vdots\\
            \> \texttt{end} 
        \end{tabbing}
        
        \pause
        \item Onde \emph{Exp} é uma expressão lógica  avaliada como verdadeira ou  falsa.
     
     \pause   
        \item A última ação antes de um \emph{else} ou \emph{end} não deve ter  vírgula nem ponto e vírgula ao final da linha.
  
     \pause   
        \item Tem-se ainda o \texttt{elseif} que pode estar embutido no comando \texttt{if--then--else--end}
        
    \end{itemize}
\end{frame}    
    
    
    
    
    
    
    
    
\begin{frame}[fragile]

\begin{block}{Exemplo: \texttt{if--then--else--end} }
     
\begin{lstlisting}[frame=single]
    ,
if (X <= 100) then
        println("X e menor que 100")
    elseif (X <= 1000 && X >= 500) then
        println("X estah entre 500 e 1000")
    else
        println("X estah abaixo de  500")
    end
    ,
\end{lstlisting}
        
\end{block}
\end{frame}    

    
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
    
    
    
\begin{frame}[fragile]
\frametitle{Estruturas de Repetições}
       

\begin{itemize}
    
    \item Picat também implementa 3 estruturas de repetição, são elas:
    \texttt{foreach}, \texttt{while}, e \texttt{do-while}.
    
    \pause
    \item O laço do  \texttt{foreach}  itera sobre termos simples e compostos.
    
        \pause
    \item O  \texttt{while} repete um conjunto de ações enquanto uma 
     condição for verdadeira.
     
        \pause
    \item A condição pode ser simples ou combinada
     
     
        \pause
    \item O laço \texttt{do-while} é análogo ao  \texttt{while}, porém ele 
    sempre executa pelo menos uma vez.
\end{itemize}
\end{frame}    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
\begin{frame}[fragile]
\frametitle{Estruturas de Repetições: \texttt{foreach}}

    \begin{itemize}
        \item Um laço \texttt{foreach} tem a seguinte forma:
        
        \begin{tabbing}
            aa \= aaa \= aaa \= aaa \= aaa \= aaa \= aaa \kill
            \> \texttt{foreach ($E_1$ in $D_1$, $Cond_1$, $\ldots$, $E_n$ in $D_n$, $Cond_n$)}  \\
            \> \> $Metas$ \\
            \>  \texttt{end} 
        \end{tabbing}
    
   \pause    
   Esta notação é dada por:
        
    \item  $E_i$ é um \emph{padrão de iteração} ou \emph{iterador}. 
        
    \item  $D_i$ é  uma expressão de \emph{valor composto}. Exemplo: uma lista de valores
        
     \item  $Cond_i$ é uma condição opcional sobre os iteradores $E_1$ até $E_i$.
        
     \item Laços do \texttt{foreach} podem conter múltiplos iteradores. 
     Caso isso ocorra, o compilador interpreta isso como diversos laços aninhados.
        
        % Maiores detalhes, ver Manual do Usuário. % copiar para outros slides
        
        % Exemplo 1 iterador e multiplos iteradores
        
    \end{itemize}
\end{frame}    


\begin{frame}[fragile]

\begin{block}{Exemplo: \texttt{foreach} }
     
\begin{lstlisting}[frame=single]
    
laco_01 =>  
    L = [17, 3, 41, 25, 8, 1, 6, 40],  
    foreach (E in L)  
        println(E)  
    end.  
\end{lstlisting}
        
\end{block}
\end{frame}    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
\begin{frame}[fragile]
\frametitle{Estruturas de Repetições: \texttt{while}}


\begin{itemize}
        \item O laço do \texttt{while} tem a seguinte forma:
        
        \begin{tabbing}
            aa \= aaa \= aaa \= aaa \= aaa \= aaa \= aaa \kill
            \> \texttt{while ($Cond$)} \\
            \> \> $Metas$  \\
            \>  \texttt{end}
        \end{tabbing} 
        
        \item Enquanto a expressão lógica \emph{Cond} for verdadeira, o conjunto de \texttt{Metas} é executado.
        
\end{itemize}
\end{frame}    


\begin{frame}[fragile]

\begin{block}{Exemplo: \texttt{while} }
     
\begin{lstlisting}[frame=single]
  
laco_02 =>  
    I = 1,  
    while (I <= 9)  
        println(I),  
        I := I + 2  
    end.  
\end{lstlisting}
        
\end{block}
\end{frame}    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
\begin{frame}[fragile]
\frametitle{Estruturas de Repetições: \texttt{do-while}}

    \begin{itemize}
        
        \item O laço \texttt{do-while} tem a seguinte forma:
        
        \begin{tabbing}
            aa \= aaa \= aaa \= aaa \= aaa \= aaa \= aaa \kill
            \> \texttt{do} \\
            \> \> $Metas$  \\
            \>  \texttt{while ($Cond$)}
        \end{tabbing} 
        
        \item Ao contrário do  \texttt{while} o iterador \texttt{do-while}
        vai executar \texttt{Metas} pelo menos uma vez antes de avaliar \texttt{Cond}.
        
    \end{itemize}
    
\end{frame}


\begin{frame}[fragile]

\begin{block}{Exemplo: \texttt{do-while} }

\begin{lstlisting}[frame=single]
     
laco_03 =>  
     J = 6,  
    do  
        println(J),  
        J := J + 1  
    while (J <= 5).  
\end{lstlisting}
        
\end{block}
\end{frame}    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Funções e Predicados Especiais}


\begin{frame}[fragile]
%[c,allowframebreaks]

\frametitle{Funções e Predicados Especiais}
    % Compreensão de lista
    % Entrada e Saida de Dados
\begin{itemize}
    
    \item Há algumas funções e predicados especiais em Picat 
    que necessitam de algum cuidado.
    
    \pause
    \item São elas: \texttt{compreensão de listas/vetores}, 
    \texttt{entrada de dados} e \texttt{saída de dados}.
    
    \item Na verdade, já fizemos uso delas, porém sem a ênfase de que
    são funções ora predicados.
    
\end{itemize}
\end{frame}      


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[c,allowframebreaks]

\frametitle{Compreensão de Listas e Vetores}    
    
\begin{itemize}    
    \item A função de \underline{\textit{compreensão de listas e vetores}} é uma função especial que  permite a fácil criação de listas ou vetores, opcionalmente seguindo uma regra de 
    criação.
    
    \item Sua notação é:
    
    \begin{tabbing}
        aa \= aaa \= aaa \= aaa \= aaa \= aaa \= aaa \kill
        \> \> \texttt{[$T$ : $E_1$ \texttt{in} $D_1$, $Cond_1$, $\ldots$, $E_n$ in $D_n$, $Cond_n$]} 
    \end{tabbing}
    
    \item Onde, $T$ é uma expressão  adicionada a lista, cada $E_i$ é um 
    iterador, cada $D_i$ é um termo composto ou expressão que gera um termo composto, e cada $Cond_i$ é uma condição sobre cada iterador de $E_1$ até $E_i$.
    
    \item Há uma seção dedicada a listas. Voltaremos ao assunto.
    
    \framebreak

    \item Esta função pode gerar um vetor também, a notação é um pouco diferente:
    
    \begin{tabbing}
        aa \= aaa \= aaa \= aaa \= aaa \= aaa \= aaa \kill
        \> \> \texttt{\{$T$ : $E_1$ \texttt{in} $D_1$, $Cond_1$, $\ldots$, $E_n$ in $D_n$, $Cond_n$\}} 
    \end{tabbing}
    
    \item Neste caso, os delimitadores são $\{$ e $\}$ de um vetor

\end{itemize}

\end{frame}      

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
 \begin{frame}[fragile]
 \frametitle{Compreensão de Listas e Vetores: Exemplo}
\begin{footnotesize}

\begin{verbatim}
main =>
 L = [(A, I) : A in [a, b], I in 1 .. 2],
 V = {(I, A) : A in [a, b], I in 1 .. 2},
 printf("\nL: %w  \nV: %w\n", L, V),
 imp_vetor(V).

imp_vetor (M) => 
Tam = M.length,  %% tamanho de M
  nl,
   foreach(I in 1  .. Tam )
     printf("V(%d):%w \t" , I, M[I] )
    end,
  nl.
%%%% $picat vetor_exemplo_01.pi
\end{verbatim}

\end{footnotesize}
 
\end{frame}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{frame}[c,allowframebreaks]

\frametitle{Leitura e Escrita}    

\begin{itemize}
        
\item Picat tem diversas variações  funções de leitura de valores,
        que serve tanto para ler de uma console \texttt{stdin},
        como de um arquivo qualquer.
        
\item Aos usuários de Prolog, aqui não precisamos do delimitador
final de `\textbf{.}'   ao final de uma leitura. 

\item Válido quando editamos no interpretador, o `\textbf{.}' final é opcional
        
\framebreak        
\item As mais importantes são:

\begin{itemize}
  
  \item \texttt{read\_int($FD$) = $Int$} $\Rightarrow$ Lê um \textit{Int} do 
  arquivo $FD$.
  
  \item \texttt{read\_real($FD$) = $Real$} $\Rightarrow$ Lê um \textit{Float} do 
  arquivo $FD$.
  
  \item \texttt{read\_char($FD$) = $Char$} $\Rightarrow$ Lê um \textit{Char} do 
  arquivo $FD$.
  
  \item \texttt{read\_line($FD$) = $String$} $\Rightarrow$ Lê uma \textit{Linha} 
  do arquivo $FD$.
  
\end{itemize}

\item Caso se deseja ler da console, padrão \texttt{stdin}, $FD$, o nome do descritor de arquivo,  pode ser omitido.

\framebreak

\item Os dois predicados mais importantes para saída de dados, são 
\texttt{write} e \texttt{print}.

\item Cada um destes predicados tem três variantes, são eles:

\begin{itemize}

\item \texttt{write($FD$, $T$)} $\Rightarrow$ Escreve um termo $T$ no arquivo 
$FD$.

\item \texttt{writeln($FD$, $T$)} $\Rightarrow$ Escreve um termo $T$ no arquivo 
$FD$, e pula uma linha ao final do termo.

\item \texttt{writef($FD$, $F$, $A\ldots$)} $\Rightarrow$ Este predicado é usado 
para escrita formatada para um arquivo $FD$, onde $F$ indica uma série de 
formatos para cada termo contido no argumento $A\ldots$. O número de argumentos 
não pode exceder 10.

\end{itemize}
        
\framebreak
        
\item Analogamente, para o predicado \texttt{print}, temos:

\begin{itemize}

  \item \texttt{print($FD$, $T$)} $\Rightarrow$ Escreve um termo $T$ no arquivo 
  $FD$.
  
  \item \texttt{println($FD$, $T$)} $\Rightarrow$ Escreve um termo $T$ no arquivo 
  $FD$, e pula uma linha ao final do termo.
  
  \item \texttt{printf($FD$, $F$, $A\ldots$)} $\Rightarrow$ Este predicado é usado 
  para escrita formatada para um arquivo $FD$, onde $F$ indica uma série de 
  formatos para cada termo contido no argumento $A\ldots$. O número de argumentos 
  não pode exceder 10.

\end{itemize}

\item Caso queira escrever para \texttt{stdout}, o nome do  $FD$, pode ser omitido.

\end{itemize}
    
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}
{Tabela de Formatação para Escrita}

Apenas os mais importantes, há outros como: hexadecimal, notação científica,
etc. Ver no apêndice do Guia do Usuário.    
\begin{table}[h]
    \begin{tabular}{l|l}
        \hline  \hline
        \textbf{Especificador} & \textbf{Saída} \\
        \hline 
        \hline 
        \texttt{\%\%} & Sinal de Porcentagem \\
        \texttt{\%c} & Caráctere \\
        \texttt{\%d \%i} & Número Inteiro Com Sinal \\
        \texttt{\%f} & Número Real \\
        \texttt{\%n} & Nova Linha \\
        \texttt{\%s} & \textit{String} \\
        \texttt{\%u} & Número Inteiro Sem Sinal \\
        \texttt{\%w} & Termo \textbf{qualquer} \\
        \hline   \hline
    \end{tabular}
\end{table}
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}

\frametitle{Comparação entre \texttt{write} e \texttt{print}}
     
\begin{table}[h]
    \centering
    \begin{tabular}{ l|l|l|l }
        \hline         \hline
        Dados $\Rightarrow$  & "abc" & [a,b,c] & 'a@b'\\
        \hline         \hline
        \texttt{write}   & [a,b,c] & [a,b,c] & 'a@b' \\
        \hline
        \texttt{writef}  & [a,b,c] (\%s) & abc (\%w) & 'a@b' (\%w) \\
        \hline
        \texttt{print}   & abc & abc & a@b \\
        \hline
        \texttt{printf}  & abc (\%s) & abc (\%w) & a@b (\%w) \\ 
        \hline \hline
    \end{tabular}
\end{table}

\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]

\frametitle{Exemplos}
    
    \begin{block}{Condicionais}
        \begin{lstlisting}[frame=single]
main =>
    X = read_int(),
    if(X <= 100)then
        println("X e menor que 100")
    else
        println("X nao e menor que 100")
    end.
.
        \end{lstlisting}
    
    \end{block}
\end{frame}

\begin{frame}[fragile]

\frametitle{Exemplos -- Repetições}
    
   \begin{lstlisting}[frame=single]
main =>
    X = read_int(),
    println(x=X),
    while(X != 0)
        X := X - 1,
        println(x=X)
    end
.
   \end{lstlisting}
        
   \begin{lstlisting}[frame=single]
main =>
    X = read_int(),
    Y = X..X*3,
    foreach(A in Y)
        println(A)
    end.
        \end{lstlisting}
    
\end{frame}

\begin{frame}[fragile]
\frametitle{Exemplos -- Compreensão de Listas}    
       
 \begin{lstlisting}[frame=single]
main => 
  Tamanho = read_int(),
  Y = [read_int() : 1..Tamanho],
  Z = {X : X in Y, X >= 0},
  forach(I in 1..Tamanho)
      if(Y[I] >= 0)then
          printf("Y[%d] e maior ou igual que 0\n",I)
      else
          printf("Y[%d] e menor que 0\n",I)
      end
  end
 printf("Os valores de Y que sao maiores que 0 sao:\n%w",Z)
.
\end{lstlisting} 
       
\textcolor{red}{Este exemplo reúne muitos conceitos desta seção.}       
   
\end{frame}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}[fragile]
\frametitle{Reflexões}

\begin{itemize}


  \item Esta seção  trata da sintaxe do Picat
  
    \pause
  \item Embora sua sintaxe não seja muito extensa, ela precisa 
  ser praticada
  
    \pause
  \item Como este conteúdo se assemelha as LPs clássicas, como exercício,
  voce está apto a fazer alguns algoritmos de outras linguagens.

  \pause
  \item Se antes o Prolog era complicado, com Picat,
  tudo ficou análogo a Python e a linguagem C
  
  \pause
  \item Em \url{https://github.com/claudiosa/CCS/tree/master/picat/input_output_exemplos}
  tem vários exemplos avançados de entradas e saídas 
  
  \pause
  \item Mãos à obra!
 
\end{itemize}

\end{frame}
